#cloud-config
# vim:syntax=yaml

### Boot Commands ###

# Very similar to runcmd but these commands run very early in the boot process.
# Only slightly after a 'boothook' would run.
#  - bootcmd will run on every boot
#  - INSTANCE_ID variable will be set to the current instance ID
#  - 'cloud-init-per' command can be used to make bootcmd run exactly once

# default: none
#bootcmd:
# - chsh -s /bin/bash ec2-user
# - echo 192.168.1.130 us.archive.ubuntu.com > /etc/hosts
# - [ cloud-init-per, once, mymkfs, mkfs, /dev/nvme1n1 ]

### IMDS ###

# Remove access to the ec2 metadata service early in boot via null route.
# The null route can be removed (by root) with:
#    route del -host 169.254.169.254 reject

# default: false
disable_ec2_metadata: false
datasource:
  Ec2:
    timeout: 50
    max_wait: 120
    metadata_urls:
      - http://169.254.169.254:80
      - http://[fd00:ec2::254]:80
      #- http://instance-data:8773
    #apply_full_imds_network_config: true
#network:
#  config: disabled

### Hostname ###

# If preserve_hostname is set, then the hostname will not be altered i.e. if true
# this will cause the set+update hostname module to not operate.
#
# https://cloudinit.readthedocs.io/en/latest/reference/modules.html#set-hostname
# https://stackoverflow.com/a/61064656
# https://docs.aws.amazon.com/linux/al2/ug/set-hostname.html

# default: false
preserve_hostname: false

# Set the hostname to a given hostname.
#hostname: <hostname>
#fqdn: <hostname>.<example.com>

# Manage /etc/hosts file.
#manage_etc_hosts: true

# Manage /etc/resolv.conf file.
#manage_resolv_conf: true
resolv_conf:
  nameservers: ["169.254.169.253"]
  searchdomains:
    - ec2.internal
    #- domain.com
  domain: domain.com
  options:
    timeout: 5

### Locale ###

# Set the locale to a given locale

#default: en_US.UTF-8
locale: en_US.UTF-8
# render template default-locale.tmpl to locale_configfile
#locale_configfile: /etc/default/locale
#keyboard:
#  layout: us

### Timezone ###

# timezone: set the timezone for this instance
# the value of 'timezone' must exist in /usr/share/zoneinfo
timezone: Etc/UTC
ntp:
  enabled: true

### Growpart ###

#growpart:
#  mode: auto
#  devices: ['/']

### Resize Rootfs ###

# resize_rootfs will resize the / filesystem on first boot, which
# allows you to launch an instance with a larger disk and/or partition
# and have the instance automatically grow the / filesystem to utilize
# the rest of space available on the disk.
#
# Note: By default, the resizefs is done early in boot and this is a blocking
# activity. Use resize_rootfs and set to 'noblock', so that  it will be run in
# parallel

# default: True
# set to 'False' to disable
resize_rootfs: noblock

### Packages ###

#repo_update: true
#repo_upgrade: all

#repo_upgrade_exclude:
#  - kernel

# Update dnf database on first boot ie run `dnf update`.
# default: true
package_update: false

# Upgrade the instance packages on first boot.
# default: false
package_upgrade: false

# If neccessary, reboot the instance after install/update of packages.
# default: false
package_reboot_if_required: false

# Install the following packages on first boot.
packages:
  - dnf-utils
  - dnf-plugins-core
  - yum-utils
  - ca-certificates
  - wget
  - curl
  - jq
  - git-core
  - git-lfs
  #- etckeeper
  #- etckeeper-dnf
  - zstd
  - bzip2
  - unzip
  - sysstat
  - telnet
  - ethtool
  - iptroute-tc
  - nftables
  - grubby
  - vim
  - ansible
  - docker
  - amazon-ecr-credential-helper
  - oci-add-hooks
  - udica

### Users ###

users:
  - default
  - name: ansible
    gecos: Ansible User
    groups: users,admin,sudo
    sudo: "ALL=(ALL) NOPASSWD:ALL"
    shell: /bin/bash
    homedir: /home/ansible
    ssh_authorized_keys:
      - "ssh-rsa ..."
      #passwd: hashed_password
      #plain_text_passwd: plaintext_password
      #lock_passwd: true

### SSH ###

# Disable ssh access as root. if you want to be able to ssh in to the system
# as the root user rather than as the 'ubuntu' user, then you must set this
# to false.

# default: true
disable_root: true

# Diable ssh password authentication.

# default: false
ssh_pwauth: false

# Delete ssh keys from the authorized_keys file.

# default: false
ssh_deletekeys: false

# ssh_redirect_user: true can be provided for any use in the 'users' list.
# This will prompt any ssh login attempts as that user with a message like
# that in disable_root_opts which redirects the person to login as
#<default_username>. This option can not be combined with either
# ssh_authorized_keys orssh_import_id.

### Sysctl ###

#sysctl:
#  vm.max_map_count: 262144

### Write Files ###

# Write the following files on first boot.
write_files:
  - path: /etc/sysctl.d/99-custom-tuning.conf
    permissions: "0644"
    owner: root
    content: |
      # Adjust default kernel printk level from 7 (debug) to 3 (info)
      kernel.printk=3 4 1 7
      # Automatically reboot the system if kernel panics
      kernel.panic=5
      # Disable unprivileged BPF
      # https://lwn.net/Articles/794284/
      kernel.unprivileged_bpf_disabled=0
      # Raise to 1048576 from the Linux default 65530
      vm.min_free_kbytes=1048576
      vm.max_map_count=1048576
      # Adjust the swappiness to 10
      vm.swappiness=10
      net.core.bpf_jit_enable=1
      net.core.message_cost=0
      net.ipv4.tcp_wmem=4096 20480 4194304
      net.ipv4.neigh.default.gc_thresh1=0
      net.ipv4.neigh.default.gc_thresh2=15360
      net.ipv4.neigh.default.gc_thresh3=16384
      net.ipv6.neigh.default.gc_thresh1=0
      net.ipv6.neigh.default.gc_thresh2=15360
      net.ipv6.neigh.default.gc_thresh3=16384
      # Use FQ queueing discipline instead of pfifo
      net.core.default_qdisc=fq
      # Enable MPTCP
      net.mptcp.enabled=1
      # Increase the local port range from 32768 to 65535
      net.ipv4.ip_local_port_range="1024 65535"
      # Increase the default TTL (Time To Live) value from 64 to 127
      net.ipv4.ip_default_ttl=127
      # Enable TCP MTU probing, highly recommended if using jumbo frames.
      net.ipv4.tcp_mtu_probing=1
      # Enable TCP window scaling
      net.ipv4.tcp_window_scaling=1
      # Disable TCP slow start after idle
      net.ipv4.tcp_slow_start_after_idle=0
      # Do not send ICMP redirects
      net.ipv4.conf.all.send_redirects=0
      net.ipv4.conf.default.send_redirects=0
      net.ipv4.conf.eth0.send_redirects=0
  - path: /etc/udev/rules.d/51-ec2-net-tuning.rules
    permissions: "0644"
    owner: root
    content: |
      SUBSYSTEM=="net", ACTION=="add|change", KERNEL=="eth*|en*", DRIVERS=="ena", RUN+="/usr/sbin/ethtool -G %k rx 4096 tx 1024"

  #- path: /usr/local/bin/my-script
  #  permissions: '0755'
  #  content: |
  #   #!/bin/bash
  #   echo "This is a script!"

### Scripts ###

#scripts-user:
#  - /usr/local/bin/my-script

### Ansible ###

# Execute the following Ansible playbook on first boot.
ansible:
  install_method: distro
  #run_user: ansible
  package_name: ansible
  pull:
    url: "https://github.com/thimslugga/cloud-init-bootstrap.git"
    playbook_name: "al2023.yml"
    #accept_host_key: true

### Run Command ###

# Note: DO NOT write files to /tmp from cloud-init use /run/somedir instead.
# Early boot environments can race systemd-tmpfiles-clean LP: #1707222.

runcmd:
  - [sh, -c, echo "========= $(date) runcmd begin ========="]
  #- [sh, -xc, "echo $(date) ': Hello, World!'"]
  - curl -w "\n" --connect-timeout 10 'http://169.254.169.254/latest/meta-data/hostname'
  # Install the SSM Agent
  #- dnf install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
  - [/usr/bin/systemctl, daemon-reload]
  #- [ /usr/bin/systemctl, enable, amazon-ssm-agent.service ]
  #- [ /usr/bin/systemctl, start, --no-block, amazon-ssm-agent.service ]
  # Install packages
  #- [ /usr/bin/dnf, -y, install, <package> ]
  # Start services
  #- [ /usr/bin/systemctl, start, --no-block, <service>.service ]
  # Apply sysctl settings
  - [/usr/bin/systemctl, restart, --no-block, systemd-sysctl.service]
  #- [ /usr/sbin/sysctl, --system ]
  # Reload udev rules
  - [udevadm, control, --reload-rules]
  - [udevadm, trigger, --attr-match=subsystem=net]
  # Reset failed units
  - [/usr/bin/systemctl, reset-failed]
  # End of runcmd
  - [sh, -c, echo "========= $(date) runcmd end ========="]

### Final Message ###

# This message is written by cloud-final when the system is finished
# its first boot. The message is rendered as if it were a template.
# If you want jinja, you have to start the line with '## template:jinja\n'

# default: cloud-init boot finished at $TIMESTAMP. Up $UPTIME seconds
final_message: "The system is now considered up, after $UPTIME seconds"

### Phone Home ###

# If this dictionary is present, then the phone_home cloud-config module will
# post specified data back to the given url.

#default: none
#phone_home:
#url: http://my.example.com/$INSTANCE_ID/
#post: [ pub_key_rsa, pub_key_ecdsa, instance_id ]
#post: all
#tries: 10

### Output ###

# Capture all subprocess output into a logfile, which is useful for troubleshooting cloud-init issues.

# default: none
output: { all: "| tee -a /var/log/cloud-init-output.log" }
# Alternative version
#output:
#  init: "> /var/log/my-cloud-init.log"
#  config: [ ">> /tmp/foo.out", "> /tmp/foo.err" ]
#  final:
#    output: "| tee /tmp/final.stdout | tee /tmp/bar.stdout"
#    error: "&1"

### Power State ###

## Reboot or poweroff instance after initial bootstrap finished
#
# power_state can be used to make the system shutdown, reboot or
# halt after boot is finished.  This same thing can be achieved by
# user-data scripts or by runcmd by simply invoking 'shutdown'.
#
# Doing it this way ensures that cloud-init is entirely finished with
# modules that would be executed, and avoids any error/log messages
# that may go to the console as a result of system services like
# syslog being taken down while cloud-init is running.
#
# delay: form accepted by shutdown. default is 'now' and other format accepted
# is '+m' (m in minutes).
# mode: required. must be one of 'poweroff', 'halt', 'reboot'
# message: provided as the message argument to 'shutdown'. default is none.

# default: none
#power_state:
#  delay: '+1'
#  mode: reboot
#  timeout: 120
#  condition: True
#  message: Rebooting instance in one minute.
